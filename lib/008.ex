defmodule Euler.Problem8 do
  @moduledoc """
    http://projecteuler.net/problem=8

	Find the greatest product of five consecutive digits in the 1000-digit number.

	73167176531330624919225119674426574742355349194934
	96983520312774506326239578318016984801869478851843
	85861560789112949495459501737958331952853208805511
	12540698747158523863050715693290963295227443043557
	66896648950445244523161731856403098711121722383113
	62229893423380308135336276614282806444486645238749
	30358907296290491560440772390713810515859307960866
	70172427121883998797908792274921901699720888093776
	65727333001053367881220235421809751254540594752243
	52584907711670556013604839586446706324415722155397
	53697817977846174064955149290862569321978468622482
	83972241375657056057490261407972968652414535100474
	82166370484403199890008895243450658541227588666881
	16427171479924442928230863465674813919123162824586
	17866458359124566529476545682848912883142607690042
	24219022671055626321111109370544217506941658960408
	07198403850962455444362981230987879927244284909188
	84580156166097919133875499200524063689912560717606
	05886116467109405077541002256983155200055935729725
	71636269561882670428252483600823257530420752963450
  """
  @number 	"73167176531330624919225119674426574742355349194934
   96983520312774506326239578318016984801869478851843
   85861560789112949495459501737958331952853208805511
   12540698747158523863050715693290963295227443043557
   66896648950445244523161731856403098711121722383113
   62229893423380308135336276614282806444486645238749
   30358907296290491560440772390713810515859307960866
   70172427121883998797908792274921901699720888093776
   65727333001053367881220235421809751254540594752243
   52584907711670556013604839586446706324415722155397
   53697817977846174064955149290862569321978468622482
   83972241375657056057490261407972968652414535100474
   82166370484403199890008895243450658541227588666881
   16427171479924442928230863465674813919123162824586
   17866458359124566529476545682848912883142607690042
   24219022671055626321111109370544217506941658960408
   07198403850962455444362981230987879927244284909188
   84580156166097919133875499200524063689912560717606
   05886116467109405077541002256983155200055935729725
   71636269561882670428252483600823257530420752963450
  "

  @doc """
  Solves problem 8.

  Just loop and accumulate.

  ## Examples
  iex> Euler.Problem8.solve("1111341112")
  12
  """
  def solve(string) do
    do_solve(String.slice(string,0,5), rslice(string, 5), 0)
  end

  def print do
    @number
	|> String.replace("\n","")
	|> String.replace(" ","")
	|> solve
	|> IO.puts
  end

  defp do_solve(_, rest_string, current_max) when rest_string == "" do
    current_max
  end

  defp do_solve(numbers_string, rest_string, current_max) do
	#move one charater from the rest to the current
	next_string_number = String.slice(numbers_string, 1,4) <> String.slice(rest_string, 0,1)
	next_rest_string = rslice(rest_string, 1)
	do_solve(next_string_number, next_rest_string, max(current_max, get_number(numbers_string)))
  end

  defp get_number(string) do
	  {_, list} = String.to_char_list(string)
	  Enum.reduce(list, 1, fn(x, acc) ->   acc * character_to_number(x) end)
  end

  defp character_to_number(number) do
	  # ?0 is the character code for 0. We need this because we are gettin ASCII codes or somehting
    number - ?0
  end

  #slices till the end on the right
  defp rslice(string, start) do
	  String.slice(string, start, String.length(string))
  end

end
